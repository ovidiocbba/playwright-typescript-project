name: Execution

# Controls when the workflow will run.
on:
  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      environment:
        description: 'Enviroment to execute(e.g. "test or staging")'
        type: choice
        required: false
        options: 
        - test
        - staging
        - production
        default: test

      scenarioTag:
        description: 'Scenario Tag to execute(e.g. "@TC-00001")'
        type: string
        required: false
        default: '@Regression'
      
      browser:
        description: 'Browsers to execute(e.g. "Chrome")'
        type: choice
        required: false
        options: 
        - chromium
        - firefox
        default: chromium

  schedule:
    # Scheduled the execution.
    # Every day at 21:00 PM (Bolivia).
    # All the cron job in GitHub Actions is in UTC.
    - cron: '0 1 * * *'
env:
  ENV: ${{ inputs.environment }}
  UI_USERNAME: ${{ secrets.UI_USERNAME }}
  UI_PASSWORD: ${{ secrets.UI_PASSWORD }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  execution:
    # Set timeouts for workflows (Best Practice).
    timeout-minutes: 30
    
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    
    # These permissions are required to generate reports.
    permissions:
      contents: write # To push a branch (gh_pages).

    steps:
      # Cloning you repository to the runner.
    - uses: actions/checkout@v4   # Necessary to access local actions.

      # Installing the environment
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*

    - name: Install dependencies
      # Clean install with exact versions from package-lock.json.
      run: npm ci

    - name: Install Playwright Browser
      run: npx playwright install ${{ inputs.browser }}

    - name: Run Playwright tests
      run: npx playwright test --grep '${{ inputs.scenarioTag }}' --project=${{ inputs.browser }}

     # Upload reports.
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 7
        if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`.

    - name: SonarCloud Scan
      # Always execute this step, regardless of the success or failure of previous steps.
      if: always()
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
